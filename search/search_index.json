{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"smunger \u00b6 munger for GWAS summary statistics PyPI: https://pypi.org/project/smunger/ Free software: MIT Features \u00b6 [x] define column properties [x] required columns: CHR, BP, EA, NEA [x] optional columns: BETA, SE, P, EAF, MAF [x] Auxiliary columns: OR, OR_SE, Z [x] Data types [x] Data ranges [x] Allow missing values and default missing values [x] semi-automatically header mapping [x] read first five rows and display in terminal [x] guess header map by common column names [x] manually check if the mapping is correct [x] input the right column number if it is wrong [x] check if OR, OR_SE, Z are present if BETA, SE are absent [x] save the final column map to json for further munging [x] data munging [x] EA \u2260 NEA [x] if EAF presents, MAF = min(EAF, 1-EAF) [x] convert OR/ORSE to BETA/SE, if BETA, SE are absent and OR, ORSE are present [x] remove duplicate SNPs with same chr-bp-sorted(EA,NEA), keep the one with lowest P [x] output: \\t separated, bgzip compress, tabix index. [x] optional output: significant SNPs, munge report CHR BP rsID EA NEA EAF MAF BETA SE P OR OR_SE Z type int int str str str float float float float float float float float allow null False False True False False False False True False True True False True null value 0 0.999 1 0 range [1\uff0c23] (0,inf) only contains \u2018ACGT\u2019 only contains \u2018ACGT\u2019 [0,1] [0,0.5] (-inf,inf) (0, inf) (0,1) (0, inf) (0, inf) (-inf,inf) - [x] liftover - [x] guess genome build - [x] liftover - [x] annotate - [x] annotate rsID Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#smunger","text":"munger for GWAS summary statistics PyPI: https://pypi.org/project/smunger/ Free software: MIT","title":"smunger"},{"location":"#features","text":"[x] define column properties [x] required columns: CHR, BP, EA, NEA [x] optional columns: BETA, SE, P, EAF, MAF [x] Auxiliary columns: OR, OR_SE, Z [x] Data types [x] Data ranges [x] Allow missing values and default missing values [x] semi-automatically header mapping [x] read first five rows and display in terminal [x] guess header map by common column names [x] manually check if the mapping is correct [x] input the right column number if it is wrong [x] check if OR, OR_SE, Z are present if BETA, SE are absent [x] save the final column map to json for further munging [x] data munging [x] EA \u2260 NEA [x] if EAF presents, MAF = min(EAF, 1-EAF) [x] convert OR/ORSE to BETA/SE, if BETA, SE are absent and OR, ORSE are present [x] remove duplicate SNPs with same chr-bp-sorted(EA,NEA), keep the one with lowest P [x] output: \\t separated, bgzip compress, tabix index. [x] optional output: significant SNPs, munge report CHR BP rsID EA NEA EAF MAF BETA SE P OR OR_SE Z type int int str str str float float float float float float float float allow null False False True False False False False True False True True False True null value 0 0.999 1 0 range [1\uff0c23] (0,inf) only contains \u2018ACGT\u2019 only contains \u2018ACGT\u2019 [0,1] [0,0.5] (-inf,inf) (0, inf) (0,1) (0, inf) (0, inf) (-inf,inf) - [x] liftover - [x] guess genome build - [x] liftover - [x] annotate - [x] annotate rsID","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Top-level package for smunger.","title":"Modules"},{"location":"changelog/","text":"Changelog \u00b6 [0.0.12] (2023-03-01) \u00b6 still munge after liftover check chr, bp before liftover [0.0.11] (2023-03-01) \u00b6 no munge after liftover [0.0.10] (2023-02-28) \u00b6 change load_sumstat input type to Union[str, Path] [0.0.9] (2023-02-28) \u00b6 support -log10P column [0.0.8] (2023-02-24) \u00b6 manul header map [0.0.7] (2023-02-24) \u00b6 annotate rsid [0.0.6] (2023-02-23) \u00b6 liftover [0.0.5] (2023-02-23) \u00b6 save significant snps save report [0.0.4] (2023-02-23) \u00b6 header map munger [0.0.3] (2023-02-22) \u00b6 io functions [0.0.2] (2023-02-20) \u00b6 column config [0.0.1] (2023-02-20) \u00b6 First release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#0012-2023-03-01","text":"still munge after liftover check chr, bp before liftover","title":"[0.0.12] (2023-03-01)"},{"location":"changelog/#0011-2023-03-01","text":"no munge after liftover","title":"[0.0.11] (2023-03-01)"},{"location":"changelog/#0010-2023-02-28","text":"change load_sumstat input type to Union[str, Path]","title":"[0.0.10] (2023-02-28)"},{"location":"changelog/#009-2023-02-28","text":"support -log10P column","title":"[0.0.9] (2023-02-28)"},{"location":"changelog/#008-2023-02-24","text":"manul header map","title":"[0.0.8] (2023-02-24)"},{"location":"changelog/#007-2023-02-24","text":"annotate rsid","title":"[0.0.7] (2023-02-24)"},{"location":"changelog/#006-2023-02-23","text":"liftover","title":"[0.0.6] (2023-02-23)"},{"location":"changelog/#005-2023-02-23","text":"save significant snps save report","title":"[0.0.5] (2023-02-23)"},{"location":"changelog/#004-2023-02-23","text":"header map munger","title":"[0.0.4] (2023-02-23)"},{"location":"changelog/#003-2023-02-22","text":"io functions","title":"[0.0.3] (2023-02-22)"},{"location":"changelog/#002-2023-02-20","text":"column config","title":"[0.0.2] (2023-02-20)"},{"location":"changelog/#001-2023-02-20","text":"First release on PyPI.","title":"[0.0.1] (2023-02-20)"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/jianhua/smunger/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 smunger could always use more documentation, whether as part of the official smunger docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/jianhua/smunger/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up smunger for local development. Fork the smunger repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/smunger.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/jianhua/smunger/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_smunger.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/jianhua/smunger/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"smunger could always use more documentation, whether as part of the official smunger docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/jianhua/smunger/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up smunger for local development. Fork the smunger repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/smunger.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/jianhua/smunger/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_smunger.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install smunger, run this command in your terminal: $ pip install smunger This is the preferred method to install smunger, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for smunger can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/jianhua/smunger Or download the tarball : $ curl -OJL https://github.com/jianhua/smunger/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install smunger, run this command in your terminal: $ pip install smunger This is the preferred method to install smunger, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for smunger can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/jianhua/smunger Or download the tarball : $ curl -OJL https://github.com/jianhua/smunger/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use smunger in a project import smunger","title":"Usage"},{"location":"usage/#usage","text":"To use smunger in a project import smunger","title":"Usage"}]}